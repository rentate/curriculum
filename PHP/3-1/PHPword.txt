・ロジック
処理の内容や手順のこと。

・デバッグ
不具合の原因を探して直すこと。

・開発手法(ウォーターフォール開発、アジャイル開発)
ウォーターフォール開発とはシステム開発を基本設計、外部設計、内部設計、プログラム設計、プログラミング、テストという工程にわけて順に段階を経て行う方法。
アジャイル開発とは、システムやソフトウェア開発におけるプロジェクト開発手法のひとつで、大きな単位でシステムを区切ることなく小単位で実装とテストを繰り返して開発を進める。

・アルゴリズム
ある特定の問題を解く手順を、単純な計算や操作の組み合わせとして明確に定義したもの。
コンピュータにプログラムの形で与えて実行させることができるよう定式化された処理手順の集合。

・フローチャート図
工程や手順の流れを図示する手法の一つで、個々の段階を箱で表し、それらを順序や論理の推移に従って矢印や線分で結んだもの。

・設計書(外部設計、内部設計)
外部設計とは、外部から見たシステムの仕様を定義する工程。
方法論の違いにより、この工程のことを基本設計あるいは概要設計などと呼ぶ。
内部設計とは、全体の構成や行うべき処理の詳細など実装に必要な仕様を定義する工程。
方法論の違いにより、この工程を機能設計あるいは詳細設計と呼ぶ。

・要件定義(要求仕様書)
システムやソフトウェアの開発において、実装すべき機能や満たすべき性能などを明確にしていく作業。
いわゆる上流工程の一部で、実際の開発、実装作業を始める前に行う。

・システム開発におけるテスト(単体テスト、結合テスト、総合テスト)
単体テストとは、関数やメソッドといった小さい単位でテストし、１つ１つの処理が正しく機能しているか確認する。
単体テストはテスト対象の単位が小さいため、摘出した不具合の原因特定や修正が比較的容易。
そのため単体テストではできるだけ多くのバグを摘出する必要がある。
結合テストとは、いくつかのモジュールを組み合わせた際に意図したとおりに動くか確認する。
少し具体的に言うと、ある機能を実現するための部品（モジュール）を組み合わせて動かした時に意図した結果が返ってくるか、データの受け渡しが正しくされるか、データを受け渡すタイミングはずれていないかなどを確認するために実施するテスト。
単体テストで見つけられなかった仕様の不備や設計上のミス、単体テストのケース漏れなどの理由から初めて問題が発覚するのが結合テストという場合がよくある。そのため、結合テストの工程が遅延したりきついスケジュールを引いたりすると後々まで影響する大きな遅延になってしまう。
総合テストとは、開発環境ではなく本番同様の環境を準備し実施する。
開発したシステムが全体を通して意図したとおりに動作するか、仕様書通りの機能を実現できているか、性能要件を満たしているかなどを確認する。
本番と同じデータ量やアクセス数で負荷をかけて試験したり、一定期間運用して揉んだ院内か確認したりといったこともシステムテストで行う。

・テスト仕様書(どのようなもの、項目)
システムやソフトウェアが、クライアントのヒアリングをもとに作り上げた要件定義書どおりに機能するかテストするためのポイントをまとめたドキュメントのこと。
項目としてテストを実施した環境、実施するテストの内容、テストを実施するためのシステムの操作手順、テストの実行結果など。

・バリデーション
入力内容や記述内容が要件を満たしているか、妥当性を確認する。

・ログ(意味、確認の仕方)
日々の出来事の記録のこと。利用履歴やデータ通信の記録のことを指す。
確認方法は
tail -f access_log
tail -f error_log

・FW(フレームワーク)
システム開発を楽に行えるように用意されたプログラム等の雛形のこと。

・PHPのFWの種類と特徴
Laravel
PHP初心者でも綺麗にコードが書けるのが特徴。
複数人で開発を行うプロジェクトでも他の人が書いたコードを読みやすい。
CakePHP
PHP開発者が誰でも素早く快適に開発を行えることを目標に生み出されたプロトタイピング型のフレームワーク。
bakeコマンドを使用し、プログラムを自動生成する機能がある。
またMVCモデルを使用し、機能ごとに分けているため、どこで、どういった処理をしているかが視覚的にわかるため使いやすい。
FuelPHP
速度を重要視したPHPフレームワークで高速かつ軽量であることが特徴。レスポンス速度を意識するようなWeb開発にも適している。
また、フレームワーク内に機能が充実しておりFuelPHPだけで簡単にシステム開発ができる。
Symfony
PHPフレームワークの中でも企業などで利用することを想定しており、テストやデバッグなどの機能が充実している。
PHPフレームワークの中だけで品質を保てるように考えられたもので、今でも定期的な更新がされていてバグなどは修正が続けられている。

・Ajax
JavaScriptを使って非同期通信し、現在見ているページをそのままで、新しいページの情報(XML形式のデータ)をサーバからやりとりすること。

・API
ソフトウェアやアプリケーションなどの一部を外部に公開することにより、第三者が開発したソフトウェアと機能を共有できるようになる。

・LAMP
Linux Apache MySQL (Perl,PHP,Python)の略。
Linux+Apache+MySQL+PHPで構成された環境。

・クラウドサーバー、レンタルサーバー、VPSの違い
クラウドサーバーとは1台の物理サーバーを複数のユーザーが利用する。
仮想サーバーを複数作成することができ、メモリやCPUはそれぞれの仮想サーバー仮想サーバーで仮想的に作成される。
レンタルサーバーとは1台の物理サーバーの性能をすべて共有して利用する。
VPSとは1台の物理サーバーをユーザーごとにわけて利用する。そのため、他のユーザーの利用によって動作が重くなることが基本的にない。

・AWS
Amazonが運営している、サーバーやデータベースなどをインターネットを経由して借りるサービスのこと。

・プラットフォーム
ある機器やソフトウェアを動作させるのに必要な基盤となる装置やソフトウェア、サービスあるいはそれらを組み合わせ（動作環境）のこと。
動かすために必要な土台となる環境。

・カバレッジ
カバーしている範囲。割合。

・エビデンス
システム開発などで、最終検証段階においてシステムが発注どおりに動作していることを示す証拠となる書類やデータのこと。

・コンパイル
プログラミング言語で書かれたコンピュータプログラム（ソースコード）を解析し、コンピュータが直接実行可能な形式のプログラム（オブジェクトコード）に変換すること。

・バッチ処理
あるタイミングで処理をまとめて行うこと。

・デプロイ(意味と方法、FTPソフトの種類)
開発したソフトウェアを実際の運用環境に配置、展開して実用に供すること。
特定の環境下でアプリケーションやシステムを使えるようにすること。
ブルーグリーンデプロイメント
ブルーとグリーンという2つの環境をあらかじめ用意しておき、現在の本番環境をブルーで動かしたまま、新環境をグリーンにデプロイする。デプロイが完了したら、グリーンにスイッチのように切り替えることで旧環境から新環境へアップデートさせる。
イミュータルデプロイメント
イミュータブルデプロイメントでは、新環境への切り替え後、問題ないことを確認したら旧環境を破棄する。デプロイのたびに新しい環境を作っては捨てる、ということを行うためブルーグリーンデプロイメントと違い、イミュータブルデプロイメントでは旧環境の運用コストは生じない。
シンボリックデプロイメント
運用中のサーバー上の別の場所に新しいファイルを配置して、サービスが利用しているシンボリックリンクを変更することで新しいアプリケーションに切り替える。サーバーを増やす必要もなく低コストでデプロイを自動化できるが、ファイルによっては再起動が必要となる場合もある。
ローリングデプロイメント
複数あるサーバーに対して順番にロードバランサーから切り離してデプロイを行っていく手法。
一時的に新旧環境が混在することになるので気を付ける必要がある。

・データベース接続クライアント(説明、代表的なもの)
MySQL
無償のオープンソースのデータベースで処理能力の速さ、Webとの親和性が高い。
Oracle Database
ネットワーク用・大規模システム用に使用されている。
SQLite
動作が軽快でサーバーにインストールせず、開発用ライブラリとしてアプリケーションに組み込んで使用することができる。
PostgreSQL
Unix系に対応していることや、CやC++、Java、Pythonなどのプログラミング言語にも対応している。

・Gitホスティングサービス(説明、代表的なもの)
Gitの仕組みを利用して、世界中の人々が自分の作品を保存、公開することができるようにしたウェブサービス。
GitHub
Bitbucket
GitLab
CloudForge

・チケット管理ツール(説明、代表的なもの)
Wrike
Redmine
Backlog

・DBのJOINとは
テーブルを結合すること。

・SEO
検索エンジンの最適化のこと。
検索エンジンに対してWebページの評価を上げ、上位に表示されるように最適化させる。

・オブジェクト指向
変数と関数をひとまとめにしたクラスを作るプログラミングの手法。